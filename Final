# -*- coding: utf-8 -*-
from __future__ import print_function
import tkinter as tk
from tkinter import *
import PIL
from PIL import Image,ImageTk
from tkinter import *
from tkinter import *
import numpy as np
from rdp import  rdp
from PIL import Image, ImageDraw, ImageColor
import PIL
import numpy as np
import matplotlib.pyplot as plt
from keras import backend as K
K.set_image_dim_ordering('th')
import h5py
import cv2
import operator
from keras.models import load_model
import pyodbc
import random
from nltk.corpus import wordnet
from nltk import pos_tag
import os
import re
import pyttsx3
import struct
from struct import unpack
from tkcolorpicker import askcolor
import pyttsx
from pyttsx.engine import Engine
from pyttsx.driver import DriverProxy
import pyttsx3
from pyttsx.engine import Engine
model=load_model("D:\pycharm\quickdraw.model")
model1=load_model("D:\pycharm\quickdraw.model1")
model2=load_model("D:\pycharm\quickdraw2.model")
model3=load_model("D:\pycharm\quickdraw3.model")
model4=load_model("D:\pycharm\quickdraw4.model")
model5=load_model("D:\pycharm\quickdraw5.model")
model6=load_model("D:\pycharm\quickdraw6.model")
model7=load_model("D:\pycharm\quickdraw7.model")
model8=load_model("D:\pycharm\quickdraw8.model")
models=[]
models=[model,model1,model2,model3,model4,model5,model6,model7,model8]

b1 = "up"
xold, yold = None, None
n_stroke=0;
list1=[]
list2=[]
list3=[];
output = []
l1 = []
l2 = []
new_list=[]



root = tk.Tk ()
root.title('image hard')

# pick a .gif image file you have in the working directory
image1 = tk.PhotoImage(file="1.png")
w = image1.width()
h = image1.height()
root.geometry("%dx%d+0+0" % (w, h))
root.resizable(0,0)
# tk.Frame has no image argument
# so use a label as a panel/frame
panel1 = tk.Label(root, image=image1)
panel1.pack(side='top', fill='both', expand='yes')
#save the panel's image from 'garbage collection
panel1.image = image1
text1=StringVar()
label=tk.Label(panel1,textvariable=text1,bg='White',height=4)
text1.set("Interactive Visual Dictionary for Kids")
label.config(font=("Arial",16))
label.place(x=570,y=150)
img1 = Image.open('D:/ FYP/Final_gui/5.png')
basewidth = 100
wpercent = (basewidth / float(img1.size[0]))
hsize = int((float(img1.size[1]) * float(wpercent)))
img1 = img1.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
img1.save('resized_image.png')
photo1 = ImageTk.PhotoImage(img1)
label = Label(image=photo1,bg="white")
label.image = photo1  # keeping refrence
label.place(x=700, y=300)
button=Button(panel1,text="Let's Start",bg="Purple",fg="Pink",width=18,height=4,command=lambda :next())
button.place(x=680,y=500)
#start the even loop
global text
text = StringVar()
text.set("")

paintcolor="black";
#image = Image.new('RGBA', (500, 500), 'white')
def next():
    image1 = tk.PhotoImage(file="6.png")
    panel1 = tk.Label(root, image=image1)
    panel1.place(x=0, y=0, relwidth=1, relheight=1)
    # save the panel's image from 'garbage collection
    panel1.image = image1
    img1 = Image.open('D:/ FYP/Final_gui/3.png')
    basewidth = 150
    wpercent = (basewidth / float(img1.size[0]))
    hsize = int((float(img1.size[1]) * float(wpercent)))
    img1 = img1.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
    img1.save('resized_image.png')
    photo1 = ImageTk.PhotoImage(img1)
    label = Label(image=photo1, bg="white")
    label.image = photo1  # keeping refrence
    label.place(x=200, y=150)

    img1 = Image.open('D:/ FYP/Final_gui/5.png')
    basewidth = 70
    wpercent = (basewidth / float(img1.size[0]))
    hsize = int((float(img1.size[1]) * float(wpercent)))
    img1 = img1.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
    img1.save('resized_image.png')
    photo1 = ImageTk.PhotoImage(img1)
    label = Label(image=photo1, bg="white")
    label.image = photo1  # keeping refrence
    label.place(x=230, y=350)
    button = Button(panel1, text="Let's Know", bg="Purple", fg="Pink", width=16, height=4, command=lambda: know())
    button.place(x=200, y=480)
    label1 = Label(image=photo1, bg="white")
    label1.image = photo1  # keeping refrence
    label1.place(x=730, y=350)
    button1 = Button(panel1, text="Let's See", bg="Purple", fg="Pink", width=16, height=4, command=lambda: See())
    button1.place(x=700, y=480)
    img2 = Image.open('D:/ FYP/Final_gui/10.jpg')

    photo2 = ImageTk.PhotoImage(img2)
    label = Label(image=photo2, bg="white")
    label.image = photo2  # keeping refrence
    label.place(x=670, y=150)


def know():
    global image;
    image = Image.new('RGBA', (500, 500), 'white')
    image1 = tk.PhotoImage(file="2.png")
    panel1 = tk.Label(root, image=image1)
    panel1.place(x=0, y=0, relwidth=1, relheight=1)
    # save the panel's image from 'garbage collection
    panel1.image = image1

    drawing_area = Canvas(root, width=380, height=600,bg="white")
    photo = PhotoImage(file="back.png")
    button1 = Button(panel1, image=photo, bg="deepskyblue2", relief=FLAT, height=40,width=35,command=lambda: next())
    button1.image = photo
    button1.place(x=3, y=50)
    photo1 = PhotoImage(file="tools.png")
    button2 = Button(panel1, image=photo1, bg="deepskyblue2", relief=FLAT, height=40, width=35, command=lambda: know())
    button2.image = photo1

    # drawing_area.create_line(list3);

    drawing_area.place(x=90,y=90)
    drawing_area.bind("<Motion>", motion)
    drawing_area.bind("<ButtonPress-1>", b1down)
    drawing_area.bind("<ButtonRelease-1>", b1up)
    button2.place(x=3, y=130)
    photo3 = PhotoImage(file="brush.png")
    button3 = Button(panel1, image=photo3, bg="deepskyblue2", relief=FLAT, height=40, width=35,
                     command=lambda: getColor())
    button3.image = photo3
    button3.place(x=3, y=200)
    global text
    text=StringVar()
    text.set("")

    label4 = Label(root, bg="white",textvariable=text)
    label4.config(font=("Arial",17))
    global label4;
    label4.place(x=250, y=600)

def See():
    image1 = tk.PhotoImage(file="7.png")
    panel1 = tk.Label(root, image=image1)
    panel1.place(x=0, y=0, relwidth=1, relheight=1)
    # save the panel's image from 'garbage collection
    panel1.image = image1

    photo = PhotoImage(file="back.png")
    button1 = Button(panel1, image=photo, bg="deeppink3", relief=FLAT, height=40, width=50, command=lambda: next())
    button1.image = photo
    button1.place(x=10, y=100)
    global entryname
    entryname = Entry(panel1,borderwidth=2)
    entryname.focus_set()
    entryname.bind("<Return>", (lambda event: show()))
    entryname.place(x=400,y=80)
    img1 = Image.open('D:/ FYP/Final_gui/8.png')
    photo1 = ImageTk.PhotoImage(img1)
    label = Label(image=photo1,bg="white")
    label.image = photo1  # keeping refrence
    label.place(x=200, y=60)
    img2 = Image.open('D:/ FYP/Final_gui/9.png')
    photo2 = ImageTk.PhotoImage(img2)
    label2 = Label(image=photo2, bg="white")
    label2.image = photo2  # keeping refrence
    label2.place(x=300, y=60)
    label3 = Label(image=photo2, bg="white")
    label3.image = photo2  # keeping refrence
    label3.place(x=550, y=60)
    button2 = Button(panel1, text="Click Me", bg="darkturquoise", fg="White", width=9, height=2,relief=FLAT,command=lambda: show())
    button2.place(x=650, y=60)



def b1down(event):
    global b1
    b1="down"

def b1up(event):
    global image
    global b1, xold, yold
    b1 = "up"
    global n_stroke
    n_stroke += 1;
    print  (n_stroke);
    list11 = tuple(list1);
    #print (list11)
    list2 = rdp(list11, 2)
    print (list2)
    list3 = [];
    #print(list3)
    print (list3)
    for i in list2:
        list3.append(tuple(list(i)))
    # print (list3);
    draw = ImageDraw.Draw(image)
    draw.line(list3, fill='Black')
    image = image.save('drawing1.png')
    image = Image.open('drawing1.png')

    basewidth = 50
    wpercent = (basewidth / float(image.size[0]))
    hsize = int((float(image.size[1]) * float(wpercent)))
    image2 = image.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
    image2.save('new.png')

    img_width = 28
    img_height = 28
    img = cv2.imread('new.png', 0)
    # ret,thres
    # h1 = cv2.threshold(img,127,255,cv2.THRESH_BINARY)
    img = cv2.resize(img, (img_width, img_height))
    arr = np.array(img - 255)
    # print (arr)
    arr = np.array(arr / 255.)

    label_dict = {0: 'arm', 1: 'bicycle', 2: 'book', 3: 'apple', 4: 'ant', 5: 'airplane', 6: 'star', 7: 'alarm clock',
                  8: 'ambulance', 9: 'angle', 10: 'cake', 11: 'anvil', 12: 'axe', 13: 'backpack', 14: 'banana',
                  15: 'bandage', 16: 'barn', 17: 'baseball', 18: 'baseball bat', 19: 'basket', 20: 'basketball',
                  21: 'bat', 22: 'bathtub',23: 'beach', 24: 'bear', 25: 'beard', 26: 'bed', 27: 'bee', 28: 'belt', 29: 'bench', 30: 'binoculars',
                  31: 'bird',32: 'Birthday Cake', 33: 'blackberry', 34: 'blueberry', 35: 'boomrange', 36: 'bottlecap',
                  37: 'bowtie', 38: 'braclet', 39: 'brain', 40: 'bread', 41: 'bridge',
                  42: 'broccoli', 43: 'broom', 44: 'bucket', 45: 'bulldozer', 46: 'bus', 47: 'bush', 48: 'Butterfly',
                  49: 'Cactus', 50: 'Calculator', 51: 'Calendar', 52: 'Camel', 53: 'Camera',
                  54: 'Camouflage', 55: 'Campfire', 56: 'Candle', 57: 'Cannon', 58: 'Canoe', 59: 'car', 60: 'Carrot',
                  61: 'Castle', 62: 'Cat', 63: 'Ceiling fan', 64: 'Cell Phone',
                  65: 'Chair', 66: 'Circle', 67: 'Cloud', 68: 'Computer', 69: 'Cookie', 70: 'Couch', 71: 'Cow',
                  72: 'Crab', 73: 'Cup', 74: 'Diamond' , 75: 'Dog', 76: 'Dolphin', 77: 'Donut',78:'Door',79:'drums',80:'Duck'
                  ,81:'Ear',82:'Elbow',83:'Elephant',84:'Envelope',85:'Eraser',86:'Eye',87:'face',88:'Fan',89:'Feather',90:'Finger'
                  ,91:'Fish',92:'Flower',93:'Foot',94:'Fork',95:'Frog',96:'Garden',97:'Giraffe'}

    new_test_cnn = arr.reshape(1, 1, 28, 28).astype('float32')
    maxi = []
    d = {}
    a = 0;
    for i in models:
        # print (i)
        new_cnn_predict = i.predict(new_test_cnn, batch_size=32, verbose=0)
        # print(new_cnn_predict)
        pr = i.predict_classes(arr.reshape((1, 1, 28, 28)))
        # print(pr)
        # fig, ax = plt.subplots(figsize=(8, 3))
        max_index, max_value = max(enumerate(new_cnn_predict[0]), key=operator.itemgetter(1))
        max_value = max_value * 100
        # print(max_value)
        d[max_value] = max_index
        # print(d)
        maxi.append(max_value)
    #print(d)
    a = max(maxi)
    #print(d[a]);
    engine = pyttsx3.init()
    engine.say(label_dict[d[a]])
    engine.setProperty('volume', 0.9)

    engine.runAndWait()
    text.set(label_dict[d[a]])
    print("The drawing is identified as --> ", label_dict[d[a]])

    xold = None           # reset the line when you let go of the button
    yold = None

def motion(event):

    if b1 == "down":
        global list1
        global list2
        global xold, yold
        if xold is not None and yold is not None:
            event.widget.create_line(xold,yold,event.x,event.y,smooth=TRUE,fill=paintcolor)
                          # here's where you draw it. smooth. neat.


        xold = event.x
        yold = event.y
        list1.append((event.x,event.y));
    else:
        list1 = []

def getColor():
    global paintcolor
    color = askcolor()[1]
    paintcolor=color;
    print(paintcolor)
con = pyodbc.connect("DRIVER={SQL Server};server=localhost;database=uff;uid=sa;pwd=11223344")
cur = con.cursor()
cur1 = con.cursor()
def unpack_drawing(file_handle):
    key_id, = unpack('Q', file_handle.read(8))
    countrycode, = unpack('2s', file_handle.read(2))
    recognized, = unpack('b', file_handle.read(1))
    timestamp, = unpack('I', file_handle.read(4))
    n_strokes, = unpack('H', file_handle.read(2))
    image = []
    global x;
    global y;
    for i in range(n_strokes):
        n_points, = unpack('H', file_handle.read(2))
        fmt = str(n_points) + 'B'
        x = unpack(fmt, file_handle.read(n_points))
        y = unpack(fmt, file_handle.read(n_points))
        image.append((x, y))

    return {

        'key_id': key_id,
        'countrycode': countrycode,
        'recognized': recognized,
        'timestamp': timestamp,
        'image': image

    }


def unpack_drawings(filename):
    with open(filename, 'rb') as f:
        for i in range(1000):
            try:
                yield unpack_drawing(f)
            except struct.error:
                break

def show():
    word = str(entryname.get());
    print(word)
    string = ''
    list = []
    files = []
    for i in os.listdir("D:\pycharm\Images"):
        if i.endswith('.bin'):
            i = i[:-4]
            files.append((i))
    #print(files)
    for j in range(len(files)):
        if (word == files[j]):
            string=files[j]
    #print(list)
    #print(string)
    sql1 = "SELECT Path from uff where Name like '" + string + "'"
    print(cur1.execute(sql1))
    if cur1.rowcount:

        row1 = str(cur1.fetchone()[0])
        print(row1)
        new = []
        my_randoms = []
        for i in range(9):
            my_randoms.append(random.randrange(0, 1000, 1))
        print(my_randoms)
        label1 = "label" + str(1)

        for drawing in unpack_drawings(row1):
            image = drawing['image']
            print(image)
            new.append(image)

        for s in range(len(my_randoms)):
            output = []
            stroke = 0
            list1 = []
            l1 = []
            l2 = []

            for stroke in new[my_randoms[s]]:
                list1 = stroke
                l1 = list1[0]
                l2 = list1[1]
                for a in range(len(l1)):
                    output.append((l1[a], l2[a]))
            img1 = Image.new('RGBA', (300, 300), 'white')
            draw = ImageDraw.Draw(img1)
            draw.line(output, fill='Black', width=5)
            img1.save('drawing2.png')
            img1 = Image.open('D:\ FYP\Final_gui\drawing2.png')
            basewidth = 200
            wpercent = (basewidth / float(img1.size[0]))
            hsize = int((float(img1.size[1]) * float(wpercent)))
            img1 = img1.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
            img1.save('resized_image.png')
            photo1 = ImageTk.PhotoImage(img1)
            if (s == 0):
                l = "label" + str(s)
                label = l;
                label = Label(image=photo1, bg="black", fg="white")
                label.image = photo1  # keeping refrence

                label.place(x=110, y=160)

            if (s == 1):
                l = "label" + str(s)
                label = l;
                label = Label(image=photo1, bg="black", fg="white")
                label.image = photo1  # keeping refrence

                label.place(x=310, y=160)

            if (s == 2):
                l = "label" + str(s)
                label = l;
                label = Label(image=photo1, bg="black", fg="white")
                label.image = photo1  # keeping refrence

                label.place(x=510, y=160)

            if (s == 3):
                l = "label" + str(s)
                label = l;
                label = Label(image=photo1, bg="black", fg="white")
                label.image = photo1  # keeping refrence

                label.place(x=710, y=160)

            if (s == 4):
                l = "label" + str(s)
                label = l;
                label = Label(image=photo1, bg="black", fg="white")
                label.image = photo1  # keeping refrence

                label.place(x=110, y=360)

            if (s == 5):
                l = "label" + str(s)
                label = l;
                label = Label(image=photo1, bg="black", fg="white")
                label.image = photo1  # keeping refrence

                label.place(x=310, y=360)

            if (s == 6):
                l = "label" + str(s)
                label = l;
                label = Label(image=photo1, bg="black", fg="white")
                label.image = photo1  # keeping refrence

                label.place(x=510, y=360)

            if (s == 7):
                l = "label" + str(s)
                label = l;
                label = Label(image=photo1, bg="black", fg="white")
                label.image = photo1  # keeping refrence

                label.place(x=710, y=360)
    else:
            var1=StringVar()
            l = Label(root, textvariable=var1, font=("Arial", 25), fg="Red",bg="white")
            var1.set("No content is avaliable")
            l.place(x=330, y=300)
root.mainloop()
